Index: gst-plugins-good-0.10.25/src/sys/v4l2/v4l2src_calls.c
===================================================================
--- gst-plugins-good-0.10.25.orig/src/sys/v4l2/v4l2src_calls.c	2011-08-26 09:17:59.028551166 -0600
+++ gst-plugins-good-0.10.25/src/sys/v4l2/v4l2src_calls.c	2011-08-26 12:34:44.347344150 -0600
@@ -424,7 +424,71 @@
   }
 }
 
-
+/******************************************************
+ * gst_v4l2src_change_crop():
+ *   Sets a crop area to capture.
+ * return value: TRUE on success, FALSE on error
+ ******************************************************/
+gboolean
+gst_v4l2src_change_crop(GstV4l2Src * v4l2src)
+{	
+	/* Check if the crop-area parameter has been set */
+	if(v4l2src->v4l2object->crop_area != NULL){
+		struct v4l2_crop crop;
+		char* crop_param;
+		gboolean error = FALSE;
+		crop.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+		gchar v4l2src_crop_area[20];
+		
+		strcpy(v4l2src_crop_area, v4l2src->v4l2object->crop_area);
+		
+		/* Searching for LEFT param */
+		crop_param = strtok(v4l2src_crop_area,",");
+		if(crop_param == NULL){
+			error = TRUE;
+		} else {
+			crop.c.left = atoi(crop_param);
+		}
+		
+		/* Searching for TOP param */
+		crop_param = strtok(NULL,"@");
+		if(crop_param == NULL){
+			error = TRUE;
+		} else {
+			crop.c.top = atoi(crop_param);
+		}
+		
+		/* Searching for WIDTH param */
+		crop_param = strtok(NULL,"X");
+		if(crop_param == NULL){
+			error = TRUE;
+		} else {
+			crop.c.width = atoi(crop_param);
+		}
+		
+		/* Searching for HEIGHT param */
+		crop_param = strtok(NULL,"");
+		if(crop_param == NULL){
+			error = TRUE;
+		} else {
+			crop.c.height = atoi(crop_param);
+		}
+
+		/* Setting crop area if there was not any error */
+		if(error || !gst_v4l2_set_crop_area(v4l2src->v4l2object, crop)){ 
+			if(error){
+				GST_WARNING_OBJECT (v4l2src, 
+					"Cropping area is not valid. Format must be "
+					"<LEFT>,<TOP>@<WIDTH>x<HEIGHT>.");	
+			} else {
+				GST_ERROR_OBJECT (v4l2src, 
+					"There was an error when assigning new crop parameters.");
+				return FALSE;
+			}
+		}
+	}
+	return TRUE;
+}
 /******************************************************
  * gst_v4l2src_capture_start():
  *   start streaming capture
@@ -450,11 +514,13 @@
       return FALSE;
     }
 
+    if (!gst_v4l2src_change_crop(v4l2src))
+      return FALSE;
+
     if (!gst_v4l2_object_start_streaming (v4l2src->v4l2object)) {
       return FALSE;
     }
   }
-
   v4l2src->is_capturing = TRUE;
 
   return TRUE;
Index: gst-plugins-good-0.10.25/src/sys/v4l2/gstv4l2object.c
===================================================================
--- gst-plugins-good-0.10.25.orig/src/sys/v4l2/gstv4l2object.c	2011-08-26 09:17:59.048540760 -0600
+++ gst-plugins-good-0.10.25/src/sys/v4l2/gstv4l2object.c	2011-08-26 09:18:06.899166271 -0600
@@ -2106,8 +2106,24 @@
 }
 
 gboolean
-gst_v4l2_object_start_streaming (GstV4l2Object * v4l2object)
+gst_v4l2_set_crop_area(GstV4l2Object * v4l2object, struct v4l2_crop crop)
 {
+	/* Setting new crop parameters */
+	/* Ignore if cropping is not supported (EINVAL). */
+
+	if (-1 == ioctl (v4l2object->video_fd, VIDIOC_S_CROP, &crop)
+		&& errno != EINVAL) {
+			GST_ELEMENT_ERROR (v4l2object->element, RESOURCE, SETTINGS,
+				(_("Error setting crop dimensions on device '%s'."), 
+				v4l2object->videodev), (NULL));
+			return FALSE;
+	}
+	return TRUE;
+}
+
+gboolean
+gst_v4l2_object_start_streaming (GstV4l2Object * v4l2object)
+{	
   if (v4l2_ioctl (v4l2object->video_fd, VIDIOC_STREAMON,
           &(v4l2object->type)) < 0) {
     GST_ELEMENT_ERROR (v4l2object->element, RESOURCE, OPEN_READ,
Index: gst-plugins-good-0.10.25/src/sys/v4l2/gstv4l2object.h
===================================================================
--- gst-plugins-good-0.10.25.orig/src/sys/v4l2/gstv4l2object.h	2011-08-26 09:17:59.008534427 -0600
+++ gst-plugins-good-0.10.25/src/sys/v4l2/gstv4l2object.h	2011-08-26 09:18:06.899166271 -0600
@@ -100,6 +100,9 @@
   /* choose if we want the ipipe to be chained or not */
   gboolean chain_ipipe;
   #endif
+  
+  /* crop area to be selected */
+  gchar *crop_area;
 
   /* how many capture frames to drop for each frame pushed */
   guint32 pushed_frame_count_1000x;
@@ -217,6 +220,7 @@
 
 gboolean      gst_v4l2_object_set_format (GstV4l2Object *v4l2object, guint32 pixelformat, guint32 width, guint32 height);
 
+gboolean      gst_v4l2_set_crop_area(GstV4l2Object * v4l2object, struct v4l2_crop crop);
 gboolean      gst_v4l2_object_start_streaming (GstV4l2Object *v4l2object);
 gboolean      gst_v4l2_object_stop_streaming (GstV4l2Object *v4l2object);
 
Index: gst-plugins-good-0.10.25/src/sys/v4l2/gstv4l2src.c
===================================================================
--- gst-plugins-good-0.10.25.orig/src/sys/v4l2/gstv4l2src.c	2011-08-26 09:17:58.988541035 -0600
+++ gst-plugins-good-0.10.25/src/sys/v4l2/gstv4l2src.c	2011-08-26 10:00:53.467280895 -0600
@@ -66,6 +66,7 @@
 #define PROP_DEF_CHAIN_IPIPE        TRUE
 
 #define DEFAULT_PROP_DEVICE   "/dev/video0"
+#define DEFAULT_CROP_AREA     NULL
 
 enum
 {
@@ -79,7 +80,8 @@
 #if defined(USE_DM365_IPIPE)
   PROP_CHAIN_IPIPE,
 #endif
-  PROP_INPUT_SRC
+  PROP_INPUT_SRC,
+  PROP_CROP_AREA
 };
 
 GST_IMPLEMENT_V4L2_PROBE_METHODS (GstV4l2SrcClass, gst_v4l2src);
@@ -275,6 +277,10 @@
   g_object_class_install_property (gobject_class, PROP_INPUT_SRC,
       g_param_spec_string ("input-src", "Select the input source",
           "Select the input source", NULL, G_PARAM_READWRITE));
+  g_object_class_install_property (gobject_class, PROP_CROP_AREA,
+      g_param_spec_string ("crop-area", "Select the crop area.",
+      "Selects the crop area using the format left:top:width:height", 
+      NULL, G_PARAM_READWRITE));
 #if defined(USE_DM365_IPIPE)
   g_object_class_install_property (gobject_class, PROP_CHAIN_IPIPE,
       g_param_spec_boolean ("chain-ipipe", "Chain the IPIPE",
@@ -394,6 +400,13 @@
         v4l2src->v4l2object->chain_ipipe = g_value_get_boolean (value);
         break;
 #endif
+      case PROP_CROP_AREA:
+        v4l2src->v4l2object->crop_area =
+           g_ascii_strup(g_value_get_string(value), -1);
+        /* We set the crop area only if we are capturing */
+        if(v4l2src->is_capturing)
+           gst_v4l2src_change_crop(v4l2src);
+        break;
       default:
         G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
         break;
@@ -430,6 +443,9 @@
         g_value_set_boolean (value, v4l2src->v4l2object->chain_ipipe);
         break;
 #endif
+      case PROP_CROP_AREA:
+        g_value_set_string(value, v4l2src->v4l2object->crop_area);
+        break;
       default:
         G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
         break;
Index: gst-plugins-good-0.10.25/src/sys/v4l2/v4l2src_calls.h
===================================================================
--- gst-plugins-good-0.10.25.orig/src/sys/v4l2/v4l2src_calls.h	2011-08-26 09:17:58.968532781 -0600
+++ gst-plugins-good-0.10.25/src/sys/v4l2/v4l2src_calls.h	2011-08-26 09:18:06.899166271 -0600
@@ -41,5 +41,6 @@
 gboolean   gst_v4l2src_capture_stop      (GstV4l2Src * v4l2src);
 gboolean   gst_v4l2src_capture_deinit    (GstV4l2Src * v4l2src);
 
+gboolean   gst_v4l2src_change_crop(GstV4l2Src * v4l2src);
 
 #endif /* __V4L2SRC_CALLS_H__ */
